
[[outputs.file]]
  ## Files to write to, "stdout" is a specially handled file.
  #files = ["stdout"]

[[inputs.logparser]]
  ## files to tail.
  files = ["test_run_id.log"]
  ## Read file from beginning.
  from_beginning = true
  ## Override the default measurement name, which would be "logparser_grok"
  name_override = "test_metric"
  ## For parsing logstash-style "grok" patterns:
  [inputs.logparser.grok]
    #patterns = ["%{COMBINED_LOG_FORMAT}"]
    patterns = ["%{CUSTOM_LOG}"]
    #CUSTOM_LOG %{TIMESTAMP_ISO8601:timestamp:ts-"2019-10-16 17:01:52.905"}  .*- %{WORD:status} .*action:%{GREEDYDATA:action}(.*)] .*\(%{GREEDYDATA:duration} seconds
    #CUSTOM_LOG %{TIMESTAMP_ISO8601:timestamp:ts-"2019-10-16 17:01:52.905"}  .*- %{WORD:status} .*action:%{GREEDYDATA:action}(.*)] .*\(%{NUMBER:run_dur:float} seconds
    custom_patterns = '''
      CUSTOM_LOG %{TIMESTAMP_ISO8601:timestamp:ts-"2006-01-02 15:04:05.000"}  .*- %{WORD:status} .*action:%{GREEDYDATA:action}(.*)] .*\(%{NUMBER:run_dur:float} seconds\) .*Run_ID : %{GREEDYDATA:run_id}
    '''
	

[[outputs.influxdb]]
  ## The full HTTP or UDP endpoint URL for your InfluxDB instance.
  urls = ["http://localhost:8086"] # required
  ## The target database for metrics (telegraf will create it if not exists).
  database = "test_db" # required
  ## Write timeout (for the InfluxDB client), formatted as a string.
  timeout = "5s"